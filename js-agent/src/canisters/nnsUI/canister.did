type AccountIdentifier = text;
type BlockHeight = nat64;
type ICPTs = record { e8s: nat64; };
type SubAccount = vec nat8;

type AccountDetails =
    record {
        account_identifier: AccountIdentifier;
        sub_accounts: vec SubAccountDetails;
        hardware_wallet_accounts: vec HardwareWalletAccountDetails;
    };

type SubAccountDetails =
    record {
        name: text;
        sub_account: SubAccount;
        account_identifier: AccountIdentifier;
    };

type HardwareWalletAccountDetails =
    record {
        name: text;
        account_identifier: AccountIdentifier;
    };

type GetAccountResponse =
    variant {
        Ok: AccountDetails;
        AccountNotFound;
    };

type Timestamp =
    record {
        timestamp_nanos: nat64;
    };

type GetTransactionsRequest =
    record {
        account_identifier: AccountIdentifier;
        offset: nat32;
        page_size: nat8;
    };

type GetTransactionsResponse =
    record {
        transactions: vec Transaction;
        total: nat32;
    };

type Send =
    record {
        to: AccountIdentifier;
        amount: ICPTs;
        fee: ICPTs;
    };

type Receive =
    record {
        from: AccountIdentifier;
        amount: ICPTs;
        fee: ICPTs;
    };

type Transfer =
    variant {
        Burn: record { amount: ICPTs };
        Mint: record { amount: ICPTs };
        Send: Send;
        Receive: Receive;
    };

type Transaction =
    record {
        block_height: BlockHeight;
        timestamp: Timestamp;
        transfer: Transfer;
    };

type CreateSubAccountResponse =
    variant {
        Ok: SubAccountDetails;
        AccountNotFound;
        SubAccountLimitExceeded;
        NameTooLong;
    };

type RenameSubAccountRequest =
    record {
        account_identifier: AccountIdentifier;
        new_name: text;
    };

type RenameSubAccountResponse =
    variant {
        Ok;
        AccountNotFound;
        SubAccountNotFound;
        NameTooLong;
    };

type RegisterHardwareWalletRequest =
    record {
        name: text;
        account_identifier: AccountIdentifier;
    };

type RegisterHardwareWalletResponse =
    variant {
        Ok;
        AccountNotFound;
        HardwareWalletAlreadyRegistered;
        HardwareWalletLimitExceeded;
        NameTooLong;
    };

type RemoveHardwareWalletRequest =
    record {
        account_identifier: AccountIdentifier;
    };

type RemoveHardwareWalletResponse =
    variant {
        Ok;
        HardwareWalletNotFound;
    };

type CanisterDetails =
    record {
        name: text;
        canister_id: principal;
    };

type AttachCanisterRequest =
    record {
        name: text;
        canister_id: principal;
    };

type AttachCanisterResponse =
    variant {
        Ok;
        CanisterLimitExceeded;
        CanisterAlreadyAttached;
        NameAlreadyTaken;
        NameTooLong;
    };

type DetachCanisterRequest =
    record {
        canister_id: principal;
    };

type DetachCanisterResponse =
    variant {
        Ok;
        CanisterNotFound;
    };

type Stats =
    record {
        accounts_count: nat64;
        sub_accounts_count: nat64;
        hardware_wallet_accounts_count: nat64;
        transactions_count: nat64;
        block_height_synced_up_to: opt nat64;
        earliest_transaction_timestamp_nanos: nat64;
        earliest_transaction_block_height: BlockHeight;
        latest_transaction_timestamp_nanos: nat64;
        latest_transaction_block_height: BlockHeight;
        seconds_since_last_ledger_sync: nat64;
    };

service : {
    get_account: () -> (GetAccountResponse) query;
    add_account: () -> (AccountIdentifier);
    get_transactions: (GetTransactionsRequest) -> (GetTransactionsResponse) query;
    create_sub_account: (text) -> (CreateSubAccountResponse);
    rename_sub_account: (RenameSubAccountRequest) -> (RenameSubAccountResponse);
    register_hardware_wallet: (RegisterHardwareWalletRequest) -> (RegisterHardwareWalletResponse);
    remove_hardware_wallet: (RemoveHardwareWalletRequest) -> (RemoveHardwareWalletResponse);
    get_canisters: () -> (vec CanisterDetails) query;
    attach_canister: (AttachCanisterRequest) -> (AttachCanisterResponse);
    detach_canister: (DetachCanisterRequest) -> (DetachCanisterResponse);
    get_icp_to_cycles_conversion_rate: () -> (nat64) query;
    get_stats: () -> (Stats) query;
}
