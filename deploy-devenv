#!/usr/bin/env bash
set -euo pipefail

print_help() {
  cat <<-EOF

	Serves the nns-dapp on a DevEnv server.

	Usage: cat deploy-devenv | ssh -A devenv

	To tear down: ssh devenv screen -S dfx -X quit
	EOF
}

# Simple, portable argument parsing.
# If the arguments multiply, please consider switching to clap.
while (($# > 0)); do
  arg="$1"
  shift 1
  case "${arg:-}" in
  --help | -h)
    print_help
    exit 0
    ;;
  --) break ;;
  *)
    echo "ERROR: Unsupported argument '${arg:-}'."
    exit 1
    ;;
  esac
done

WORKDIR="$HOME/dfn"

# Installs a given component and check that it works, if a check is defined.
setup() {
  local command
  command="${1//-/_}"
  shift 1
  if [[ $(type -t "check_$command") == function ]]; then
    setup_checked "$command" "$@"
  else
    "install_$command" "$@"
  fi
}
setup_checked() {
  local command
  command="${1//-/_}"
  shift 1
  "check_$command" "$@" >/dev/null 2>/dev/null || {
    echo "Installing $command $*..."
    out="$(mktemp)"
    {
      [[ $(type -t "preinstall_$command") != function ]] || "preinstall_$command"
      "install_$command" "${@}" && "check_$command" "${@}"
    } >"$out" && rm "$out"
  } || {
    echo "ERROR: Failed to install $command $*"
    return 1
  }
}

# Desired state: The workdir ~/dfn exists
check_workdir() {
  test -d "$WORKDIR"
}
install_workdir() {
  mkdir -p "$WORKDIR"
}
# Desired state: snsdemo clone exists
check_snsdemo() {
  test -d "$WORKDIR/snsdemo"
}
install_snsdemo() {
  git clone git@github.com:dfinity/snsdemo.git "$WORKDIR/snsdemo"
}
# Desired state: nns-dapp clone exists
check_nns_dapp() {
  test -d "$WORKDIR/nns-dapp"
}
install_nns_dapp() {
  git clone git@github.com:dfinity/nns-dapp.git "$WORKDIR/nns-dapp"
}
# Desired state: nns-dapp tools are installed
install_nns_dapp_tools() {
  bash -x "$WORKDIR/nns-dapp/scripts/setup" --profile .bashrc
}
# Desired state: ic clone exists
check_ic() {
  test -d "$WORKDIR/ic"
}
install_ic() {
  git clone git@github.com:dfinity/ic.git "$WORKDIR/ic"
}
# Desired state: A given apt package is installed.
check_apt() {
  dpkg-query -l "$1"
}
install_apt() {
  : "Update the cache if it is more than 1 day old"
  find "/var/lib/apt/periodic/update-success-stamp" -mtime +1 -print | grep -q . || sudo apt-get update
  sudo apt-get install -yy "$1"
}
# Desired state: snsdemo tools are installed.
install_snsdemo_tools() {
  "$WORKDIR/snsdemo/bin/dfx-sns-demo-install"
}
# Desired state: The path contains a given string.
check_path_has() {
  echo "$PATH" | tr : "\n" | grep -qw "$1"
}
install_path_has() {
  export PATH="$1:$PATH"
  printf "%s\n" '' "export PATH=\"$1:\$PATH\"" >>~/.bashrc
}
# Desired state:  A snapshot newer than snsdemo exists.
SNAPSHOT="$HOME/snapshot.tar.xz"
check_snapshot() {
  [[ "$SNAPSHOT" -nt "$WORKDIR/snsdemo" ]]
}
install_snapshot() {
  (
    cd "$WORKDIR/snsdemo"
    bin/dfx-snapshot-stock-make --snapshot ~/snapshot.tar.xz
  )
}
# Desired state: The existing snsdemo clone is checked out at a given release.
install_snsdemo_release() {
  local release
  release="$(jq -r '.defaults.build.config.SNSDEMO_RELEASE' "$WORKDIR/nns-dapp/dfx.json")"
  pushd "$WORKDIR/snsdemo"
  git fetch --tags
  git checkout "$release"
  popd
}
# Desired state: There is a screen running dfx.
# Note: The screen will be named, excitingly, "dfx".
check_dfx_screen() {
  screen -ls | grep -wq dfx
}
install_dfx_screen() {
  (
    set -euxo pipefail
    cd "$WORKDIR/nns-dapp"
    screen -L -Logfile dfx.screenlog -d -S dfx -m ./scripts/dfx-snapshot-start --host 0.0.0.0:8080 --snapshot "$SNAPSHOT"
    install_screen_info
  )
}
# Prints dfx info
install_screen_info() {
  (
    set -euo pipefail
    set +x
    cd "$WORKDIR/nns-dapp"
    echo "Running dfx in a screen called 'dfx'"
    echo "To list running screens: screen -ls"
    echo "To connect to the screen: screen -r dfx"
    echo "To disconnect but keep running: ctrl-a d"
    echo "To see the logs: tail -f '$WORKDIR/nns-dapp-/dfx.screenlog"
    echo "To kill the screen: screen -S dfx -X quit"
    URL="$(hostname)"
    URL="https://$(dfx canister id nns-dapp).${URL#devenv-}-ingress.devenv.dfinity.network/"
    echo "nns-dapp: $URL"
  )
}

if (($# == 0)); then
  setup workdir
  setup path_has "$HOME/bin"
  setup path_has "$HOME/.local/bin"
  setup path_has "$WORKDIR/snsdemo/bin"
  setup snsdemo
  setup nns_dapp
  setup ic
  setup snsdemo_release
  setup nns_dapp_tools
  setup snsdemo_tools
  dfx-software-dfx-install --version 0.15.1 # BUG: nns-dapp setup should have installed the correct version
  setup snapshot
  setup dfx_screen
  setup screen_info
else
  setup "${@}"
fi
echo FIN
