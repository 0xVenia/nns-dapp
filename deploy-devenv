#!/usr/bin/env bash
set -euxo pipefail

# Usage: cat deploy-devenv | ssh devenv


WORKDIR="$HOME/dfn"

# Installs a given component and check that it works, if a check is defined.
setup() {
  local command
  command="${1//-/_}"
  shift 1
  if [[ $(type -t "check_$command") == function ]]; then
    setup_checked "$command" "$@"
  else
    "install_$command" "$@"
  fi
}
setup_checked() {
  local command
  command="${1//-/_}"
  shift 1
  "check_$command" "$@" >/dev/null 2>/dev/null || {
    echo "Installing $command $*..."
    out="$(mktemp)"
    {
      [[ $(type -t "preinstall_$command") != function ]] || "preinstall_$command"
      "install_$command" "${@}" && "check_$command" "${@}"
    } >"$out" && rm "$out"
  } || {
    echo "ERROR: Failed to install $command $*"
    return 1
  }
}

# Implements desired state: The workdir ~/dfn exists
check_workdir() {
  test -d "$WORKDIR"
}
install_workdir() {
  mkdir -p "$WORKDIR"
}
# Implements desired state: snsdemo clone exists
check_snsdemo() {
  test -d "$WORKDIR/snsdemo"
}
install_snsdemo() {
  git clone git@github.com:dfinity/snsdemo.git "$WORKDIR/snsdemo"
}
# Implements desired state: nns-dapp clone exists
check_nns_dapp() {
  test -d "$WORKDIR/nns-dapp"
}
install_nns_dapp() {
  git clone git@github.com:dfinity/nns-dapp.git "$WORKDIR/nns-dapp"
}
# Installs nns-dapp tools
install_nns_dapp_tools() {
  "$WORKDIR/nns-dapp/scripts/setup"
}
# Implements desired state: ic clone exists
check_ic() {
  test -d "$WORKDIR/ic"
}
install_ic() {
  git clone git@github.com:dfinity/ic.git "$WORKDIR/ic"
}
# Gets a version of ic-admin that works
IC_ADMIN="$WORKDIR/snsdemo/bin-other/ic-admin"
check_ic_admin() {
  "$IC_ADMIN" --help
}
install_ic_admin() {
  curl https://download.dfinity.systems/ic/dc5d8cfec5550f99dc4912501037478de8ab9426/openssl-static-binaries/x86_64-linux/ic-admin.gz | gunzip | install -m 755 /dev/stdin "$IC_ADMIN"
}
# Installs with apt
check_apt() {
  dpkg-query -l "$1"
}
install_apt() {
  : "Update the cache if it is more than 1 day old"
  find "/var/lib/apt/periodic/update-success-stamp" -mtime +1 -print | grep -q . || sudo apt-get update
  sudo apt-get install -yy "$1"
}
# Installs snsdemo tools
install_snsdemo_tools() {
  "$WORKDIR/snsdemo/bin/dfx-sns-demo-install"
}
# Adds to the path, if not already there
check_path_has() {
  echo "$PATH" | tr : "\n" | grep -qw "$1"
}
install_path_has() {
  export PATH="$1:$PATH"
  printf "%s\n" '' 'export PATH="$1:$PATH"' >>~/.bashrc
}
# Creates a snapshot, if not already there
SNAPSHOT="$HOME/snapshot.tar.xz"
check_snapshot() {
  [[ "$SNAPSHOT" -nt "$WORKDIR/snsdemo" ]]
}
install_snapshot() {
  (
    cd "$WORKDIR/snsdemo"
    bin/dfx-snapshot-stock-make --snapshot ~/snapshot.tar.xz
  )
}
# Checks out the matching snsdemo release
install_snsdemo_release() {
  local release
  release="$(jq -r '.defaults.build.config.SNSDEMO_RELEASE' "$WORKDIR/nns-dapp/dfx.json")"
  pushd "$WORKDIR/snsdemo"
  git checkout "$release"
  popd
}
# Start screen running dfx
check_dfx_screen() {
  screen -ls | grep -wq dfx
}
install_dfx_screen() {
  (
    set -euxo pipefail
    cd "$WORKDIR/nns-dapp"
    screen -L -Logfile dfx.screenlog -d -S dfx -m ./scripts/dfx-snapshot-start --host 0.0.0.0:8080 --snapshot "$SNAPSHOT"
    install_dfx_info
  )
}
# Print dfx info
install_screen_info() {
  (
    set -euo pipefail
    set +x
    cd "$WORKDIR/nns-dapp"
    echo "Running dfx in a screen called 'dfx'"
    echo "To list running screens: screen -ls"
    echo "To connect to the screen: screen -r dfx"
    echo "To disconnect but keep running: ctrl-a d"
    echo "To see the logs: tail -f '$WORKDIR/nns-dapp-/dfx.screenlog"
    echo "To kill the screen: screen -S dfx -X quit"
    URL="$(hostname)"
    URL="https://$(dfx canister id nns-dapp).${URL#devenv-}-ingress.devenv.dfinity.network/"
    echo $URL
    echo "nns-dapp: $URL"
  )
}

if (($# == 0)); then
  setup workdir
  setup path_has "$HOME/bin"
  setup path_has "$HOME/.local/bin"
  setup path_has "$WORKDIR/snsdemo/bin"
  setup snsdemo
  setup nns_dapp
  setup ic
  setup snsdemo_release
  setup nns_dapp_tools
  setup snsdemo_tools
  setup ic_admin
  dfx-software-dfx-install --version 0.14.4 # BUG: nns-dapp setup should have installed the correct version
  setup snapshot
  setup dfx_screen
  setup screen_info
else
  setup "${@}"
fi
