#!/usr/bin/env bash
set -euo pipefail
SOURCE_DIR="$(dirname "$(realpath "${BASH_SOURCE[0]}")")"
PATH="$SOURCE_DIR:$PATH"

help_text() {
  cat <<-"EOF"
	Tests:
	  - Populating a given schema with large scale data
	  - Migrating from one Wasm+schema to another Wasm+schema and back.

	Note:
	  - This test is primarily experimental at this time.
	  - This test is based on the 'downgrade-upgrade' test.
	  - Some or all of these changes may be migrated into the downgrade-upgrade test.
	EOF
}

# Source the clap.bash file ---------------------------------------------------
source "$SOURCE_DIR/../clap.bash"
# Define options
clap.define short=w long=wasm1 desc="A test build of the first wasm.  May be a _test.wasm.gz file or a named release." variable=FIRST_WASM default="out/nns-dapp_test.wasm.gz"
clap.define short=W long=wasm2 desc="A test build of the second wasm.  May be a _test.wasm.gz file or a named release." variable=SECOND_WASM default="prod"
clap.define short=a long=args1 desc="A file containing the first init arguments." variable=FIRST_ARGFILE default="out/nns-dapp-arg-local.did"
clap.define short=A long=args2 desc="A file containing the second init arguments." variable=SECOND_ARGFILE default="out/nns-dapp-arg-local.did"
clap.define short=s long=schema1 desc="The schema for the first deployment.  Overrides the value in the argument file." variable=FIRST_SCHEMA default=""
clap.define short=S long=schema2 desc="The schema for the second deployment.  Overrides the value in the argument file." variable=FIRST_SCHEMA default=""
clap.define short=a long=accounts desc="Accounts will be created until there are at least this many." variable=NUM_TOY_ACCOUNTS default="220000"
clap.define short=c long=chunk desc="The accounts are created in chunks of this size." variable=TOY_ACCOUNT_CHUNK_SIZE default="10000"
# Source the output file ----------------------------------------------------------
source "$(clap.build)"

WORKDIR="$(realpath "$(mktemp -d nns-dapp-test-XXXXXX)")"
on_exit() {
  exit_code=$?
  if ((exit_code == 0)); then
    rm -fr "$WORKDIR"
  else
    {
      printf "\n\nERROR: exiting with code %s\n\n" $exit_code
      printf "       %s\n" \
        "The temporary working directory may assist with debugging:" \
        "  '$WORKDIR'"
      echo
      exit $exit_code
    } >&2
  fi
}
trap on_exit EXIT

# Checks that the configuration number is valid.
lint_configuration_num() {
  local configuration_num
  configuration_num="${1:-}"
  [[ "${configuration_num:-}" == 1 ]] || [[ "${configuration_num:-}" == 2 ]] || {
    echo "ERROR: configuration_num is invalid."
    echo "Expected: 1 or 2 (corresponding to the initial deployment and the upgrade respectively)"
    echo "Actual:  '${configuration_num:-}'"
    exit 1
  } >&2
}

# Checks that a local path points to a plausible _test.wasm.gz file.
lint_wasm_path() {
  local wasm_path
  wasm_path="${1:-}"
  [[ "${wasm_path:-}" = *_test.wasm.gz ]] || {
    echo "ERROR: Invalid wasm path."
    echo "Expected:  A path ending in _test.wasm.gz"
    echo "Actual:    '${wasm_path:-}'"
    exit 1
  } >&2
  test -e "${wasm_path:-1}" || {
    echo "ERROR: Wasm file does not exist."
    echo "Path: '${wasm_path:-}'"
    exit 1
  } >&2
  data_type="$(file "${wasm_path:-}")"
  [[ "${data_type:-}" = *gzip\ compressed\ data* ]]
}

# Checks that the release name is valid
lint_release_name() {
  local release_name
  release_name="${1:-}"
  git check-ref-format "refs/tags/${release_name:-}" || {
    echo "ERROR: Invalid release name"
    echo "Expected: A valid git tag name"
    echo "Actual:   '${release_name:-}'"
    exit 1
  } >&2
}

# Downloads a released Wasm into the temporary working directory.
download_wasm() {
  local release_name destination
  release_name="$1"
  destination="$2"
  curl -sSLf "https://github.com/dfinity/nns-dapp/releases/download/${release_name}/nns-dapp_test.wasm.gz" | sponge "$destination"
}

# The path to the local copy of the wasm used in the test.
working_wasm() {
  local configuration_num
  lint_configuration_num "${configuration_num:-}"
  echo "$WORKDIR/nns-dapp-${configuration_num}_test.wasm.gz"
}

# The path to the arguments used in the test
working_arguments() {
  local configuration_num
  lint_configuration_num "${configuration_num:-}"
  echo "$WORKDIR/nns-dapp-args-${configuration_num}.did"
}


# Gets a local copy of a wasm from a path or GitHub release
get_wasm() {
  local configuration_num destination
  path_or_release="${1:-}"
  destination="${2:-}"
  lint_wasm_path "$destination"

  if [[ "${wasm_path:-}" = *.wasm.gz ]]; then
    lint_wasm_path "${path_or_release:-}"
    cp "${path_or_release}" "$destination"
  else
    lint_release_name "${path_or_release:-}"
    download_wasm "${path_or_release}" "$destination"
  fi
  : Final sanity check
  lint_wasm_path "$destination"
}

exit 1

verify_healthy() {
  dfx canister call nns-dapp get_stats
  dfx canister call nns-dapp get_canisters
}

get_current_wasm() {
  ./scripts/docker-build --network local
}

get_prod_wasm() {
  # Note: Using the test build allows us to get arbitrary test accounts from the canister.
  if test -n "${PROD_WASM:-}"; then
    test -f "${PROD_WASM}" || {
      echo "ERROR: The specified production wasm file does not exist at: '$PROD_WASM'"
      exit 1
    } >&2
  else
    PROD_WASM="$(mktemp nns-dapp-prod-XXXXXX --suffix .wasm.gz)"
    curl -sL https://github.com/dfinity/nns-dapp/releases/download/prod/nns-dapp_test.wasm.gz >"$PROD_WASM"
  fi
}

# Gets the number of transactions; this list may be pruned so is not invariant.
get_transactions_count() {
  dfx canister call nns-dapp get_stats | idl2json | jq -r '.transactions_count'
}
# Gets stats that should be invariant across upgrades
get_upgrade_invariant_stats() {
  dfx canister call nns-dapp get_stats | idl2json | jq '{accounts_count, neurons_created_count, neurons_topped_up_count, sub_accounts_count}'
}
# Gets some sample accounts
sample_toy_accounts() {
  seq 0 "$TOY_ACCOUNT_CHUNK_SIZE" "$((NUM_TOY_ACCOUNTS - 1))" | xargs -I{} dfx canister call nns-dapp get_toy_account "({})" --query
}
# Gets data that should be invariant across upgrades
get_upgrade_invariants() {
  echo "==== UPGRADE INVARIANT STATS ===="
  get_upgrade_invariant_stats
  echo "==== END ===="
  echo "==== SAMPLE INVARIANT STATS ===="
  sample_toy_accounts
  echo "==== END ===="
}

# Verifies that the state is at least as large as expected.
check_state_size() {
  local invariants accounts_count expected_min_accounts
  expected_min_accounts="$NUM_TOY_ACCOUNTS"
  invariants="$(get_upgrade_invariant_stats)"
  accounts_count="$(jq .accounts_count <<<"$invariants")"
  if ((accounts_count < expected_min_accounts)); then
    {
      echo "ERROR: 'accounts_count' is smaller than expected."
      printf "  Expected at least: %10d\n" "$expected_min_accounts"
      printf "  Actual:            %10d\n" "$accounts_count"
      printf "  State:\n%s\n" "$invariants"
      exit 1
    } >&2
  fi
}

# Verifies that the number of transactions is reasonable.  Some may be pruned, but not a lot.
check_num_transactions() {
  # The toy state creates 3 transactions per account; see TRANSACTIONS_PER_ACCOUNT
  # in: rs/backend/src/accounts_store/toy_data.rs
  toy_transactions="$((NUM_TOY_ACCOUNTS * 3))"
  # Note: Transactions MAY be pruned if the state is large enough, however in tests
  # we should not make the state so large that, say, half the transactions are pruned.
  # If that many are pruned, either the test is unrealistic or we should increase the
  # amount of storage available.
  expected_min_transactions="$((toy_transactions / 2))"
  transactions_count="$(get_transactions_count)"
  if ((transactions_count < expected_min_transactions)); then
    {
      echo "ERROR: 'transactions_count' is smaller than expected."
      printf "  Expected at least: %10d\n" "$expected_min_transactions"
      printf "  Actual:            %10d\n" "$transactions_count"
      printf "  Note: Transactions MAY be pruned but if a lot are being pruned, there is insufficient memory."
      exit 1
    } >&2
  fi
}

# Wait for the migration countdown to complete.
wait_for_migration() {
  local migration_countdown
  for ((i = 0; i < 120; i++)); do
    migration_countdown="$(dfx canister call nns-dapp get_stats --query | idl2json | jq '.migration_countdown[0] // 0')" # TODO: Remove the default when prod has migration countdown stats
    echo "Migration countdown: $migration_countdown"
    if ((migration_countdown == 0)); then
      return
    fi
    sleep 1
  done
  {
    echo "ERROR: Migration did not complete within the expected time."
    echo "       For a migration to be considered complete, the migration_countdown should reach zero."
    echo "       Here are the current stats:"
    dfx canister call nns-dapp get_stats
    exit 1
  } >&2
}

# Installs the current build of nns-dapp
# TODO: Record upgrade time
# TODO: Record upgrade cycles
# TODO: Record state size
upgrade_nnsdapp() {
  local prestate poststate
  prestate="$(get_upgrade_invariants | tee /dev/stderr)"
  # Check that the data is plausible
  # TODO: Check that the prestate is not empty; first we need to populate the state.
  # TODO: Consider storing all accounts data in a merkle tree so that we can check just the root hash.
  dfx canister install --upgrade-unchanged nns-dapp --wasm "$1" --mode upgrade --argument "$(cat nns-dapp-arg-local.did)" --yes
  scripts/dfx-canister-check-wasm-hash --wasm "$1" --canister nns-dapp
  wait_for_migration
  poststate="$(get_upgrade_invariants)"
  if [[ "$prestate" != "$poststate" ]]; then
    {
      echo "ERROR: The upgrade changed the state of the canister."
      echo "Prestate: $prestate"
      echo "Poststate: $poststate"
      echo "Diff:"
      diff -u <(echo "$prestate") <(echo "$poststate") || true
      exit 1
    } >&2
  fi
}

echo "Getting or building the wasm..."
test -n "${CURRENT_WASM:-}" || {
  CURRENT_WASM="out/nns-dapp_test.wasm.gz"
  echo "Building $CURRENT_WASM..."
  ./scripts/docker-build --network local
}
test -e "$CURRENT_WASM" || {
  echo "ERROR: Wasm file not found at '$CURRENT_WASM'."
  exit 1
} >&2
echo "Installing $CURRENT_WASM..."
if dfx canister id nns-dapp >/dev/null 2>/dev/null; then
  upgrade_nnsdapp "$CURRENT_WASM"
else
  dfx canister create nns-dapp
  dfx canister install nns-dapp --wasm "$CURRENT_WASM" --argument "$(cat nns-dapp-arg-local.did)" --yes
fi
scripts/dfx-canister-check-wasm-hash --wasm "$CURRENT_WASM" --canister nns-dapp
echo "Checking that the current wasm is healthy..."
verify_healthy
echo "Installing state"
while (("$(dfx canister call nns-dapp get_stats | idl2json | jq -r .accounts_count)" < NUM_TOY_ACCOUNTS)); do
  dfx canister call nns-dapp create_toy_accounts "($TOY_ACCOUNT_CHUNK_SIZE: nat)"
done
verify_healthy
check_state_size
check_num_transactions
echo "Downloading and installing the prod wasm..."
get_prod_wasm
upgrade_nnsdapp "$PROD_WASM"
echo "Checking that the rollback is healthy..."
verify_healthy
check_num_transactions
echo "Rolling forwards..."
upgrade_nnsdapp "$CURRENT_WASM"
echo "Checking that the upgrade is healthy..."
verify_healthy
check_num_transactions
echo SUCCESS
