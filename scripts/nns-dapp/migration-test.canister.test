#!/usr/bin/env bash
set -euo pipefail
. "${0%.test}"

# Prints a section title
title() {
  cat <<-EOF

	=============================================================================
	   $*
	=============================================================================
	EOF
}

# Prints a sample argfile
minimal_argument() {
  echo '()'
}
sample_argument_local_1() {
  cat <<-EOF
	(opt record{
	args = vec {
	record{ 0="API_HOST"; 1="http://localhost:8080" };
	record{ 0="CYCLES_MINTING_CANISTER_ID"; 1="rkp4c-7iaaa-aaaaa-aaaca-cai" };
	record{ 0="DFX_NETWORK"; 1="local" };
	record{ 0="FEATURE_FLAGS"; 1="{\"ENABLE_CKBTC\":true,\"ENABLE_CKBTC_ICRC2\":false,\"ENABLE_CKTESTBTC\":false,\"ENABLE_FULL_WIDTH_PROPOSAL\":true,\"ENABLE_ICP_ICRC\":false,\"ENABLE_INSTANT_UNLOCK\":false,\"ENABLE_MY_TOKENS\":false,\"ENABLE_NOODLE\":true,\"ENABLE_SNS\":true,\"ENABLE_SNS_2\":true,\"ENABLE_STAKE_NEURON_ICRC1\":false,\"ENABLE_SWAP_ICRC1\":false}" };
	record{ 0="FETCH_ROOT_KEY"; 1="true" };
	record{ 0="GOVERNANCE_CANISTER_ID"; 1="rrkah-fqaaa-aaaaa-aaaaq-cai" };
	record{ 0="HOST"; 1="http://localhost:8080" };
	record{ 0="IDENTITY_SERVICE_URL"; 1="http://qhbym-qaaaa-aaaaa-aaafq-cai.localhost:8080" };
	record{ 0="LEDGER_CANISTER_ID"; 1="ryjl3-tyaaa-aaaaa-aaaba-cai" };
	record{ 0="OWN_CANISTER_ID"; 1="qsgjb-riaaa-aaaaa-aaaga-cai" };
	record{ 0="ROBOTS"; 1="<meta name=\"robots\" content=\"noindex, nofollow\" />" };
	record{ 0="SNS_AGGREGATOR_URL"; 1="http://sns_aggregator.localhost:8080" };
	record{ 0="STATIC_HOST"; 1="http://localhost:8080" };
	record{ 0="TVL_CANISTER_ID"; 1="" };
	record{ 0="WASM_CANISTER_ID"; 1="qaa6y-5yaaa-aaaaa-aaafa-cai" };
	};
	schema = opt variant { AccountsInStableMemory };
	})
	EOF
}
sample_argument_mainnet_1() {
  cat <<-EOF
	(opt record{
	args = vec {
	record{ 0="API_HOST"; 1="https://icp-api.io" };
	record{ 0="CKBTC_INDEX_CANISTER_ID"; 1="n5wcd-faaaa-aaaar-qaaea-cai" };
	record{ 0="CKBTC_LEDGER_CANISTER_ID"; 1="mxzaz-hqaaa-aaaar-qaada-cai" };
	record{ 0="CKBTC_MINTER_CANISTER_ID"; 1="mqygn-kiaaa-aaaar-qaadq-cai" };
	record{ 0="CYCLES_MINTING_CANISTER_ID"; 1="rkp4c-7iaaa-aaaaa-aaaca-cai" };
	record{ 0="DFX_NETWORK"; 1="mainnet" };
	record{ 0="FEATURE_FLAGS"; 1="{\"ENABLE_CKBTC\":true,\"ENABLE_CKBTC_ICRC2\":false,\"ENABLE_CKTESTBTC\":false,\"ENABLE_FULL_WIDTH_PROPOSAL\":true,\"ENABLE_ICP_ICRC\":false,\"ENABLE_INSTANT_UNLOCK\":false,\"ENABLE_MY_TOKENS\":false,\"ENABLE_STAKE_NEURON_ICRC1\":false,\"ENABLE_SWAP_ICRC1\":false}" };
	record{ 0="FETCH_ROOT_KEY"; 1="false" };
	record{ 0="GOVERNANCE_CANISTER_ID"; 1="rrkah-fqaaa-aaaaa-aaaaq-cai" };
	record{ 0="HOST"; 1="https://icp-api.io" };
	record{ 0="IDENTITY_SERVICE_URL"; 1="https://identity.internetcomputer.org/" };
	record{ 0="LEDGER_CANISTER_ID"; 1="ryjl3-tyaaa-aaaaa-aaaba-cai" };
	record{ 0="OWN_CANISTER_ID"; 1="qoctq-giaaa-aaaaa-aaaea-cai" };
	record{ 0="ROBOTS"; 1="" };
	record{ 0="SNS_AGGREGATOR_URL"; 1="https://3r4gx-wqaaa-aaaaq-aaaia-cai.icp0.io" };
	record{ 0="STATIC_HOST"; 1="https://icp0.io" };
	record{ 0="TVL_CANISTER_ID"; 1="ewh3f-3qaaa-aaaap-aazjq-cai" };
	record{ 0="WASM_CANISTER_ID"; 1="qaa6y-5yaaa-aaaaa-aaafa-cai" };
	};
	schema = opt variant { Map };
	})
	EOF
}

(
  title get_arguments_schema should get the expected schema
  compare_schemas() {
    [[ "${EXPECTED_SCHEMA:-}" == "${ACTUAL_SCHEMA:-}" ]] || {
      echo "ERROR: Failed to get schema from arguments"
      echo "Expected: '${EXPECTED_SCHEMA:-}'"
      echo "Actual:   '${ACTUAL_SCHEMA:-}'"
      exit 1
    } >&2
  }
  EXPECTED_SCHEMA=""
  ACTUAL_SCHEMA="$(minimal_argument | get_arguments_schema)"
  compare_schemas
  EXPECTED_SCHEMA="AccountsInStableMemory"
  ACTUAL_SCHEMA="$(sample_argument_local_1 | get_arguments_schema)"
  compare_schemas
  EXPECTED_SCHEMA="Map"
  ACTUAL_SCHEMA="$(sample_argument_mainnet_1 | get_arguments_schema)"
  compare_schemas
)

(
  title List of schemas should match .did file
  # TODO:  Support extracting this with idl2json rather than sed hackery.
  # Sed hackery:
  # - Get the SchemaLabel type definition, up to the closing brace.
  # - Collect the payload lines in the hold space
  # - At the end:
  #   - Replace all separators with whitespace
  #   - Keep just the text in the braces
  #   - Print
  # shellcheck disable=SC2016
  #   - C2016: We really do want to use $ in the sed expression.
  SCHEMAS_IN_DID_FILE="$(sed -n '/type SchemaLabel/,/^}/p' rs/backend/nns-dapp.did | sed -nE 'H;${g;s/[; \n]+/ /g;s/.*\{ *//g;s/ *\}.*//g;p}')"
  [[ "$SCHEMAS_IN_DID_FILE" == "${SCHEMA_LABELS[*]}" ]] || {
    echo "ERROR: List of schema labels in bash should match the labels in the .did file."
    echo "Expected schema labels: ${SCHEMAS_IN_DID_FILE}"
    echo "Actual schema labels:   ${SCHEMA_LABELS[*]}"
    exit 1
  } >&2
)

(
  title Schema converters should give expected values
  for index in "${!SCHEMA_LABELS[@]}"; do
    EXPECTED_NAME="${SCHEMA_LABELS[$index]}"
    ACTUAL_NAME="$(schema_name "$index")"
    [[ "$EXPECTED_NAME" == "$ACTUAL_NAME" ]] || {
      echo "ERROR: Failed to get the name of schema index '$index'."
      echo "Expected: '$EXPECTED_NAME'"
      echo "Expected: '$ACTUAL_NAME'"
      exit 1
    } >&2
    ACTUAL_INDEX="$(schema_index "$EXPECTED_NAME")"
    ((index == ACTUAL_INDEX)) || {
      echo "ERROR: Failed to get the index of schema '$EXPECTED_NAME'."
      echo "Expected: '$index'"
      echo "Expected: '${ACTUAL_INDEX:-}'"
      exit 1

    }

  done

)

echo "$(basename "$0") PASSED"
